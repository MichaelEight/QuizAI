# TODO
- Fetch generated questions, assign to Task[] and then randomize order

- "What would be the 100pts answer?" button (or 'show correct answer')

- FIX bug: answer "some stone". -1 is returned
    it'd be wise to determine the error source e.g. GPT should return -100 if he considers something is wrong (invalid prompt etc.)
    and -10 should be returned in case of api error, so maybe -1 during conversion to number?

- convert styles from css to tailwind
- Think of better task-serving algorithm i.e. it's better to learn chunks and then add bits of next chunk after few tasks are finished

- Improve API structure, so that it returns:
    success: boolean
    error: string
    payload: any[] // this can be like Task[] or number (grade)
Structure recommended by GPT:
{
  "success": boolean,          // true on 2xx, false on 4xx/5xx
  "status_code": number,       // HTTP status code
  "message": string,           // human-readable (optional on success)
  "data": object|null,         // payload for successful calls
  "error": {                   // only for failures
    "code": string,            // machine error code (e.g. VALIDATION_ERROR)
    "details": string[]        // array of field-level errors or contextual info
  }|null,
  "meta": object|null          // optional paging, timestamps, request_id, etc.
}
Example:
{
  "success": true,
  "status_code": 200,
  "message": "Questions generated",
  "data": {
    "closed_questions": [
      { "id": 1, "question": "...", "options": [...], "answer_index": 2 },
      …
    ],
    "open_questions": [
      { "id": 101, "question": "...", "model_answer": "..." },
      …
    ]
  },
  "error": null,
  "meta": { "closed_count": 5, "open_count": 3 }
}
Example with error:
{
  "success": false,
  "status_code": 400,
  "message": "Validation failed",
  "data": null,
  "error": {
    "code": "MISSING_FIELDS",
    "details": ["text is required", "closed_amount is required"]
  },
  "meta": null
}


Frontend:
- Create pages (either react router or just swap content on one page by hiding the other one):
    - Source text input, multiline
    - Settings:
        - numerical: amount of open questions:
        - numerical: closed questions
        - checkbox: allow multiple correct answers
        - checkbox: force multiple correct answers
        - dropdown: level of questions (basic, academic etc)
    - Quiz page (must be separate):
        - Randomize order of questions
        - Display current question and field for answers: either ABCD (each is button) or text input
        - Buttons:
            - Check answer (compares to correct answers)
            - Next (active after 'check answer' triggered)
            - Mark as invalid (for AI errors)

- Take care of data handling:
    - Save to localStorage (or cookies)
    - Pass information between pages. Either state manager or prop as arguments
    - Data to save:
        - Input text
        - Settings
        - Questions
    - User must have the ability to go back without losing any data. Generate new questions only after pressing "Generate".


Backend further plans:
- Fix forcing multiple correct answers
- Make sure there is error handling for everything (e.g. OpenAI API errors)
- Document API, so it's clear, when it returns what (e.g. how to recognize errors)
- Add actual unit tests